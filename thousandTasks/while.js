// 1. Даны положительные числа A и B (A > B). На отрезке длины A размещено
//    максимально возможное количество отрезков длины B (без наложений).
//    Не используя операции умножения и деления, найти длину незанятой
//    части отрезка A.

let task01 = function(a, b) {
  while(a > b) {
    a -= b;
  }
  console.log( a );
};

// 2. Даны положительные числа A и B (A > B). На отрезке длины A размещено
//    максимально возможное количество отрезков длины B (без наложений).
//    Не используя операции умножения и деления, найти количество отрезков B,
//    размещенных на отрезке A.

let task02 = function(a, b) {
  let count = 0;
  while(a > b) {
    a -= b;
    count++;
  }
  console.log( count );
};

// 3. Даны целые положительные числа N и K. Используя только операции
//    сложения и вычитания, найти частное от деления нацело N на K, а также
//    остаток от этого деления.

let task03 = function(n, k) {
  let count = 0;
  while(n > k) {
    n -= k;
    count++;
  }
  console.log('Деление нацело =', count);
  console.log('Остаток от деления =', n);
};

// 4. Дано целое число N (> 0). Если оно является степенью числа 3,
//    то вывести True, если не является— вывести False.

let task04 = function(n) {
  while ( n > 3 ) {
    n /= 3;
  }
  console.log( n === 3 );
};

// 5. Дано целое число N (> 0), являющееся некоторой степенью
//    числа 2: N = 2K. Найти целое число K— показатель этой степени.

let task05 = function(n) {
  let count = 1;
  while ( n > 2 ) {
    n /= 2;
    count++;
  }
  console.log( n === 2 ? '2 в степени ' + count : false );
};

// 6. Дано целое число N (> 0). Найти двойной
//    факториал N: N!! = N·(N–2)·(N–4)·… (последний сомножитель равен 2,
//    если N— четное, и 1, если N— нечетное). Чтобы избежать целочисленного
//    переполнения, вычислять это произведение с помощью вещественной
//    переменной и вывести его как вещественное число.

let task06 = function(n) {
  let i = n % 2 === 0 ? 2 : 1;
  let result = 1;
  while (i <= n) {
    result *= i;
    i += 2;
  }
  console.log(result);
};

// 7. Дано целое число N (> 0). Найти наименьшее целое положительное
//    число K, квадрат которого превосходит N: K^2 > N. Функцию извлечения
//    квадратного корня не использовать.

let task07 = function(n) {
  let k = 1;
  while (k * k <= n) {
    k++;
  }
  console.log('K =', k, 'K^2 =', k * k, 'N =', n);
};

// 8. Дано целое число N (> 0). Найти наибольшее целое число K, квадрат
//    которого не превосходит N: K^2 ≤ N. Функцию извлечения квадратного
//    корня не использовать.

let task08 = function(n) {
  let k = 1;
  while ( (k + 1) * (k + 1) <= n ) {
    k++;
  }
  console.log('K =', k, 'K^2 =', k * k, 'N =', n);
};

// 9. Дано целое число N (> 1). Найти наименьшее целое число K, при котором
//    выполняется неравенство 3^K > N.

let task09 = function(n) {
  let k = 1;
  while (3 ** k <= n) {
    k++
  }
  console.log('3 в степени', k, '=', 3 ** k, 'N =', n);
};

// 10. Дано целое число N (> 1). Найти наибольшее целое число K, при
//     котором выполняется неравенство 3^K < N.

let task10 = function(n) {
  let k = 1;
  while (3 ** (k + 1) <= n) {
    k++;
  }
  console.log('3 в степени', k, '=', 3 ** k, 'N =', n);
};

// 11. Дано целое число N (> 1). Вывести наименьшее из целых чисел K,
//     для которых сумма 1 + 2 +… + K будет больше или равна N,
//     и саму эту сумму.

let task11 = function(n) {
  let sum = 0;
  let k   = 1;
  while (sum <= n) {
    sum += k;
    k++;
  }
  console.log('K =', k, 'Sum =', sum, 'N =', n);
};

// 12. Дано целое число N (> 1). Вывести наибольшее из целых чисел K, для
//     которых сумма 1 + 2 + … + K будет меньше или равна N, и саму эту сумму.

let task12 = function(n) {
  let sum = 0;
  let k   = 1;
  while (sum + k <= n) {
    sum += k;
    k++;
  }
  console.log('K =', k, 'Sum =', sum, 'N =', n);
};

// 13. Дано число A (> 1). Вывести наименьшее из целых чисел K, для
//     которых сумма 1 + 1/2 + … + 1/K будет больше A, и саму эту сумму.

let task13 = function(a) {
  let sum = 0;
  let k   = 1;
  while (sum <= a) {
    sum += 1 / k;
    k++;
  }
  console.log('K =', k, 'Sum =', sum, 'A =', a);
};

// 14. Дано число A (> 1). Вывести наибольшее из целых чисел K, для
//     которых сумма 1 + 1/2 +… + 1/K будет меньше A, и саму эту сумму.

let task14 = function(a) {
  let sum = 0;
  let k   = 1;
  while (sum + 1 / k < a) {
    sum += 1 / k;
    k++;
  }
  console.log('K =', k, 'Sum =', sum, 'A =', a);
};

// 15. Начальный вклад в банке равен 1000 руб. Через каждый месяц размер
//     вклада увеличивается на P процентов от имеющейся суммы
//     (P— вещественное число, 0 < P < 25). По данному P определить, через
//     сколько месяцев размер вклада превысит 1100 руб., и вывести найденное
//     количество месяцев K (целое число) и итоговый размер вклада S
//     (вещественное число).

let task15 = function(percent) {
  let deposit  = 1000;
  let month = 0;
  while (deposit <= 1100) {
    deposit += deposit / 100 * percent;
    month++;
  }
  console.log('Initial deposit:', 1000, 'result =', deposit,
              'Month have passed =', month);
};

// 16. Спортсмен-лыжник начал тренировки, пробежав в первый день 10 км.
//     Каждый следующий день он увеличивал длину пробега на P процентов от
//     пробега предыдущего дня (P— вещественное, 0 < P < 50). По данному P
//     определить, после какого дня суммарный пробег лыжника за все дни
//     превысит 200 км, и вывести найденное количество дней K (целое) и
//     суммарный пробег S (вещественное число).

let task16 = function(percent) {
  let distance = 10;
  let days     =  0;
  while (distance <= 200) {
    distance += distance / 100 * percent;
    days++;
  }
  console.log('Distance:', distance);
  console.log('Days passed:',  days);
};

// 17. Дано целое число N (> 0). Используя операции деления нацело и взятия
//     остатка от деления, вывести все его цифры, начиная с самой
//     правой(разряда единиц).

let task17 = function(n) {
  while (n > 1) {
    console.log(n % 10);
    n = Math.floor(n / 10);
  }
};

// 18. Дано целое число N (> 0). Используя операции деления нацело и взятия
//     остатка от деления, найти количество и сумму его цифр.

let task18 = function(n) {
  let sum   = 0;
  let count = 0;
  while (n > 1) {
    sum += n % 10;
    n = Math.floor(n / 10);
    count++;
  }
  console.log('Sum =', sum, 'count =', count);
};

// 19. Дано целое число N (> 0). Используя операции деления нацело и
//     взятия остатка от деления, найти число, полученное при прочтении
//     числа N справа налево.

let task19 = function(n) {
  let invertedNumber = '';
  while (n > 1) {
    invertedNumber += n % 10;
    n = Math.floor(n / 10);
  }
  console.log('Invert number =', Number(invertedNumber));
};

// 20. Дано целое число N (> 0). С помощью операций деления нацело и
//     взятия остатка от деления определить, имеется ли в записи числа N
//     цифра «2». Если имеется, то вывести True, если нет — вывести False.

let task20 = function(n) {
  let containTwo = false;
  while (n > 1) {
    if (n % 10 === 2) containTwo = true;
    n = Math.floor(n / 10);
  }
  console.log(containTwo);
};

// 21. Дано целое число N (> 0). С помощью операций деления нацело и взятия
//     остатка от деления определить, имеются ли в записи числа N нечетные
//     цифры. Если имеются, то вывести True, если нет — вывести False.

let task21 = function(n) {
  let containOdd = false;
  while (n > 1) {
    if (n % 10 % 2 === 1) containOdd = true;
    n = Math.floor(n / 10);
  }
  console.log(containOdd);
};

// 22. Дано целое число N (> 1). Если оно является простым, то есть не имеет
//     положительных делителей, кроме 1 и самого себя, то вывести True,
//     иначе вывести False.

let task22 = function(n) {
  let isSimple = true;
  let divider = 2;
  while (divider < n) {
    if (n % divider === 0) isSimple = false;
    divider++;
  }
  console.log(isSimple);
};

// 23. Даны целые положительные числа A и B. Найти их наибольший общий
//     делитель (НОД), используя алгоритм Евклида:
//     НОД(A, B) = НОД(B, A mod B), если B ≠ 0; НОД(A, 0) = A,
//     где «mod» обозначает операцию взятия остатка от деления.

let task23 = function(a, b) {
  while (a !== b) {
    let tmp1 = Math.abs(a - b);
    let tmp2 = a < b ? a : b;
    a = tmp1 > tmp2 ? tmp1 : tmp2;
    b = tmp1 < tmp2 ? tmp1 : tmp2;
  }
  console.log(a);
};

// 24. Дано целое число N (> 1). Последовательность чисел Фибоначчи FK
//     определяется следующим образом:
//     F1 = 1, F2 = 1, FK = FK–2 + FK–1, K = 3, 4,… .
//     Проверить, является ли число N числом Фибоначчи. Если является,
//     то вывести True, если нет — вывести False.

let task24 = function(n) {
  let first  = 1;
  let second = 1;
  let isFibonacci = false;
  while (first + second <= n) {
    let tmp = first + second;
    first = second;
    second = tmp;
    if (second === n) isFibonacci = true;
  }
  console.log(n, isFibonacci);
};

// 25. Дано целое число N (> 1). Найти первое число Фибоначчи, большее N.
//     (определение чисел Фибоначчи дано в задании // 24).

let task25 = function(n) {
  let first  = 1;
  let second = 1;
  while (second <= n) {
    let tmp = first + second;
    first = second;
    second = tmp;
  }
  console.log('N =', n, 'F =', second);
};

// 26. Дано целое число N (> 1), являющееся числом Фибоначчи: N = FK
//     (определение чисел Фибоначчи дано в задании // 24). Найти целые числа
//     FK–1 и FK+1 — предыдущее и последующее числа Фибоначчи.

let task26 = function(n) {
  let first  = 1;
  let second = 1;
  while (second < n) {
    let tmp = first + second;
    first = second;
    second = tmp;
  }
  console.log('FN - 1 =', first, 'N =', n, 'FN + 1 =', first + second);
};

// 27. Дано целое число N (> 1), являющееся числом Фибоначчи: N = FK
//     (определение чисел Фибоначчи дано в задании // 24). Найти целое
//     число K — порядковый номер числа Фибоначчи N.

let task27 = function(n) {
  let first  = 1;
  let second = 1;
  let count  = 2;
  while (second < n) {
    let tmp = first + second;
    first = second;
    second = tmp;
    count++;
  }
  console.log('N =', n, 'index', count);
};

// 28. Дано вещественное число ε (> 0). Последовательность вещественных
//     чисел AK определяется следующим образом:
//     A1 = 2, AK = 2 + 1/AK–1, K = 2, 3,… . Найти первый из номеров K,
//     для которых выполняется условие
//     |AK – AK–1| < ε, и вывести этот номер, а также числа AK–1 и AK.

let task28 = function(e) {
  let first  = 2;
  let second = 2 + 1 / first;
  let count  = 1;
  while (Math.abs(second - first) > e) {
    let tmp = 2 + 1 / second;
    first = second;
    second = tmp;
    count++;
  }
  console.log('E =', e, 'Count =', count, 'AK - 1 =', first, 'AK =', second);
};

// 29. Дано вещественное число ε (> 0). Последовательность вещественных
//     чисел AK определяется следующим образом:
//     A1 = 1, A2 = 2, AK = (AK–2 + 2·AK–1)/3, K = 3, 4, … .
//     Найти первый из номеров K, для которых выполняется условие
//     |AK – AK–1| < ε, и вывести этот номер, а также числа AK–1 и AK.

let task29 = function(e) {
  let a1 = 1;
  let a2 = 2;
  let count = 2;
  while (Math.abs(a2 - a1) > e) {
    let tmp = (a1 + 2 * a2) / 3;
    a1 = a2;
    a2 = tmp;
    count++;
  }
  console.log('E =', e, 'Count =', count, 'AK - 1 =', a1, 'AK =', a2);
};

// 30. Даны положительные числа A, B, C. На прямоугольнике размера A × B
//     размещено максимально возможное количество квадратов со стороной C
//     (без наложений). Найти количество квадратов, размещенных на
//     прямоугольнике. Операции умножения и деления не использовать.

let task30 = function(a, b, c) {
  let width  = 0;
  let height = 0;
  while (a > c) {
    a -= c;
    width++;
  }
  while (b > c) {
    b -= c;
    height++;
  }
  console.log( width * height );
};